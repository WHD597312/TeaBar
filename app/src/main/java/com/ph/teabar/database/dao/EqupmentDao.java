package com.ph.teabar.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import teabar.ph.com.teabar.pojo.Equpment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUPMENT".
*/
public class EqupmentDao extends AbstractDao<Equpment, Long> {

    public static final String TABLENAME = "EQUPMENT";

    /**
     * Properties of entity Equpment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EqupmentId = new Property(0, long.class, "equpmentId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsFirst = new Property(2, boolean.class, "isFirst", false, "IS_FIRST");
        public final static Property MacAdress = new Property(3, String.class, "macAdress", false, "MAC_ADRESS");
        public final static Property MStage = new Property(4, int.class, "mStage", false, "M_STAGE");
        public final static Property LightColor = new Property(5, String.class, "lightColor", false, "LIGHT_COLOR");
        public final static Property WashTime = new Property(6, String.class, "washTime", false, "WASH_TIME");
        public final static Property HasWater = new Property(7, String.class, "hasWater", false, "HAS_WATER");
        public final static Property Inform_isFinish = new Property(8, boolean.class, "inform_isFinish", false, "INFORM_IS_FINISH");
        public final static Property Inform_isHot = new Property(9, boolean.class, "inform_isHot", false, "INFORM_IS_HOT");
        public final static Property Inform_noWater = new Property(10, boolean.class, "inform_noWater", false, "INFORM_NO_WATER");
        public final static Property Inform_isFull = new Property(11, boolean.class, "inform_isFull", false, "INFORM_IS_FULL");
        public final static Property Inform_isWashing = new Property(12, boolean.class, "inform_isWashing", false, "INFORM_IS_WASHING");
        public final static Property ErrorCode = new Property(13, String.class, "errorCode", false, "ERROR_CODE");
        public final static Property Mode = new Property(14, int.class, "Mode", false, "MODE");
        public final static Property OnLine = new Property(15, boolean.class, "onLine", false, "ON_LINE");
        public final static Property LightOpen = new Property(16, int.class, "lightOpen", false, "LIGHT_OPEN");
        public final static Property Bringht = new Property(17, int.class, "bringht", false, "BRINGHT");
        public final static Property HotFinish = new Property(18, int.class, "hotFinish", false, "HOT_FINISH");
    }


    public EqupmentDao(DaoConfig config) {
        super(config);
    }
    
    public EqupmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUPMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: equpmentId
                "\"NAME\" TEXT," + // 1: name
                "\"IS_FIRST\" INTEGER NOT NULL ," + // 2: isFirst
                "\"MAC_ADRESS\" TEXT," + // 3: macAdress
                "\"M_STAGE\" INTEGER NOT NULL ," + // 4: mStage
                "\"LIGHT_COLOR\" TEXT," + // 5: lightColor
                "\"WASH_TIME\" TEXT," + // 6: washTime
                "\"HAS_WATER\" TEXT," + // 7: hasWater
                "\"INFORM_IS_FINISH\" INTEGER NOT NULL ," + // 8: inform_isFinish
                "\"INFORM_IS_HOT\" INTEGER NOT NULL ," + // 9: inform_isHot
                "\"INFORM_NO_WATER\" INTEGER NOT NULL ," + // 10: inform_noWater
                "\"INFORM_IS_FULL\" INTEGER NOT NULL ," + // 11: inform_isFull
                "\"INFORM_IS_WASHING\" INTEGER NOT NULL ," + // 12: inform_isWashing
                "\"ERROR_CODE\" TEXT," + // 13: errorCode
                "\"MODE\" INTEGER NOT NULL ," + // 14: Mode
                "\"ON_LINE\" INTEGER NOT NULL ," + // 15: onLine
                "\"LIGHT_OPEN\" INTEGER NOT NULL ," + // 16: lightOpen
                "\"BRINGHT\" INTEGER NOT NULL ," + // 17: bringht
                "\"HOT_FINISH\" INTEGER NOT NULL );"); // 18: hotFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUPMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Equpment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEqupmentId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsFirst() ? 1L: 0L);
 
        String macAdress = entity.getMacAdress();
        if (macAdress != null) {
            stmt.bindString(4, macAdress);
        }
        stmt.bindLong(5, entity.getMStage());
 
        String lightColor = entity.getLightColor();
        if (lightColor != null) {
            stmt.bindString(6, lightColor);
        }
 
        String washTime = entity.getWashTime();
        if (washTime != null) {
            stmt.bindString(7, washTime);
        }
 
        String hasWater = entity.getHasWater();
        if (hasWater != null) {
            stmt.bindString(8, hasWater);
        }
        stmt.bindLong(9, entity.getInform_isFinish() ? 1L: 0L);
        stmt.bindLong(10, entity.getInform_isHot() ? 1L: 0L);
        stmt.bindLong(11, entity.getInform_noWater() ? 1L: 0L);
        stmt.bindLong(12, entity.getInform_isFull() ? 1L: 0L);
        stmt.bindLong(13, entity.getInform_isWashing() ? 1L: 0L);
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(14, errorCode);
        }
        stmt.bindLong(15, entity.getMode());
        stmt.bindLong(16, entity.getOnLine() ? 1L: 0L);
        stmt.bindLong(17, entity.getLightOpen());
        stmt.bindLong(18, entity.getBringht());
        stmt.bindLong(19, entity.getHotFinish());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Equpment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEqupmentId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsFirst() ? 1L: 0L);
 
        String macAdress = entity.getMacAdress();
        if (macAdress != null) {
            stmt.bindString(4, macAdress);
        }
        stmt.bindLong(5, entity.getMStage());
 
        String lightColor = entity.getLightColor();
        if (lightColor != null) {
            stmt.bindString(6, lightColor);
        }
 
        String washTime = entity.getWashTime();
        if (washTime != null) {
            stmt.bindString(7, washTime);
        }
 
        String hasWater = entity.getHasWater();
        if (hasWater != null) {
            stmt.bindString(8, hasWater);
        }
        stmt.bindLong(9, entity.getInform_isFinish() ? 1L: 0L);
        stmt.bindLong(10, entity.getInform_isHot() ? 1L: 0L);
        stmt.bindLong(11, entity.getInform_noWater() ? 1L: 0L);
        stmt.bindLong(12, entity.getInform_isFull() ? 1L: 0L);
        stmt.bindLong(13, entity.getInform_isWashing() ? 1L: 0L);
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(14, errorCode);
        }
        stmt.bindLong(15, entity.getMode());
        stmt.bindLong(16, entity.getOnLine() ? 1L: 0L);
        stmt.bindLong(17, entity.getLightOpen());
        stmt.bindLong(18, entity.getBringht());
        stmt.bindLong(19, entity.getHotFinish());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Equpment readEntity(Cursor cursor, int offset) {
        Equpment entity = new Equpment( //
            cursor.getLong(offset + 0), // equpmentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // isFirst
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // macAdress
            cursor.getInt(offset + 4), // mStage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lightColor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // washTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hasWater
            cursor.getShort(offset + 8) != 0, // inform_isFinish
            cursor.getShort(offset + 9) != 0, // inform_isHot
            cursor.getShort(offset + 10) != 0, // inform_noWater
            cursor.getShort(offset + 11) != 0, // inform_isFull
            cursor.getShort(offset + 12) != 0, // inform_isWashing
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // errorCode
            cursor.getInt(offset + 14), // Mode
            cursor.getShort(offset + 15) != 0, // onLine
            cursor.getInt(offset + 16), // lightOpen
            cursor.getInt(offset + 17), // bringht
            cursor.getInt(offset + 18) // hotFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Equpment entity, int offset) {
        entity.setEqupmentId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsFirst(cursor.getShort(offset + 2) != 0);
        entity.setMacAdress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMStage(cursor.getInt(offset + 4));
        entity.setLightColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWashTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHasWater(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInform_isFinish(cursor.getShort(offset + 8) != 0);
        entity.setInform_isHot(cursor.getShort(offset + 9) != 0);
        entity.setInform_noWater(cursor.getShort(offset + 10) != 0);
        entity.setInform_isFull(cursor.getShort(offset + 11) != 0);
        entity.setInform_isWashing(cursor.getShort(offset + 12) != 0);
        entity.setErrorCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMode(cursor.getInt(offset + 14));
        entity.setOnLine(cursor.getShort(offset + 15) != 0);
        entity.setLightOpen(cursor.getInt(offset + 16));
        entity.setBringht(cursor.getInt(offset + 17));
        entity.setHotFinish(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Equpment entity, long rowId) {
        entity.setEqupmentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Equpment entity) {
        if(entity != null) {
            return entity.getEqupmentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Equpment entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
